<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.greenright.dao.BasketDao">

  <resultMap type="Basket" id="BasketMap">
    <id column="member_id" property="memberNo"/>
    <result column="option_item_matters" property="optionItemMatters"/>
    <result column="registered_date" property="registeredDate"/>
  </resultMap>
  
  <resultMap type="Basket" id="BasketWithAllMap">
    <id column="option_item_id" property="optionItemId"/>
    <result column="option_item_matters" property="optionItemMatters"/>
    <result column="options_price" property="optionPrice"/>
    <result column="quantity" property="optionQuantity"/>
    <result column="options_id" property="optionItemId"/>
    <result column="options_name" property="optionName"/>
    <result column="registered_date" property="registeredDate"/>
  
    <result column="product_id" property="productId" />
    <result column="product_name" property="productName" />
    <result column="price" property="productPrice" />
    

    <result column="member_id" property="sellerId" />
    <result column="name" property="sellerName" />
    
    <collection property="photos" ofType="ProductPhoto">
      <id column="product_photo_id" property="no" />
      <result column="photo_path" property="photoPath" />
      <result column="main_photo_flag" property="mainPhoto" />
    </collection>

  </resultMap>
  
  <sql id="selectBasket">
    select
      member_id,
      option_item_id,
      registered_date,
      quantity
  </sql>
  
  <sql id="whereBasket">
    where member_id=#{memberNo}
  </sql> 
 
  <insert id="insert" parameterType="Basket">
    insert into
      baskets(
        member_id,
        option_item_id,
        registered_date,
        quantity)
      values(
        #{memberNo},
        #{optionItemNo},
        now(),
        #{quantity})
  </insert>
  
  <select id="findBy" parameterType="Basket" resultMap="BasketMap">
    <include refid="selectBasket"/>
    from baskets
    where member_id=#{memberNo} and option_item_id=#{optionItemNo}
  </select>
  
  <select id="findAll" parameterType="int" resultMap="BasketMap">
    <include refid="selectBasket"/>
    from baskets
    <include refid="whereBasket"/>
    order by registered_date desc
  </select>
  
  <select id="findWithAll" parameterType="int" resultMap="BasketWithAllMap">
    select
      i.option_item_id,
      i.option_item_matters,
      i.options_price,
      b.quantity,
      b.registered_date,
      
      o.options_id,
      o.options_name,

      p.product_id,
      p.product_name,
      p.price,

      f.product_photo_id,
      f.photo_path,
      f.main_photo_flag,

      m.member_id,
      m.name
      
    from baskets b
      left outer join option_items i on i.option_item_id = b.option_item_id
      left outer join options o on o.options_id = i.options_id
      left outer join products p on p.product_id = o.product_id
      left outer join product_photos f on (p.product_id = f.product_id AND f.main_photo_flag = 0)
      left outer join sellers s on s.member_id = p.member_id
      left outer join members m on m.member_id = s.member_id
      
    where
      b.member_id=#{no}
    
    order by b.registered_date desc

  </select>
  
  <update id="update" parameterType="Basket">
    update baskets
    <set>
      <if test="quantity != null">quantity = quantity + #{quantity}</if>
    </set>
    where member_id=#{memberNo} and option_item_id=#{optionItemNo}
  </update>
  
</mapper>